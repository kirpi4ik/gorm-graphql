buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails:grails-docs:${project.ext.properties.grailsDocsVersion ?: grailsVersion}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

version project.projectVersion

ext {
    commonBuild = 'https://raw.githubusercontent.com/grails/grails-common-build/master'
}

subprojects {
    group "org.myhab.tools"
    version project.projectVersion

    ext {
        userOrg = "grails"
        isGrailsPlugin = name.startsWith('grails-plugin')
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }

    if (project.name.startsWith("examples-")) {
        if (project.name.startsWith("examples-grails-")) {
            apply plugin: "org.grails.grails-web"
        }

        tasks.withType(Test) {
            testLogging {
                events "failed"
                exceptionFormat "full"
            }
        }
        return
    }

    if (project.name.endsWith('docs')) {
        apply from: "${commonBuild}/common-docs.gradle"
        return
    }

    if (isGrailsPlugin) {
        apply plugin: "org.grails.grails-plugin"
    } else {
        apply from: "$rootProject.projectDir/gradle/project.gradle"
    }
    apply from: "$rootProject.projectDir/gradle/publishing.gradle"

    dependencies {
        testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions) {
            forkOptions.jvmArgs = ['-Xmx1024m']
        }
    }

    tasks.withType(Test) {
        testLogging {
            events "failed"
            exceptionFormat "full"
            showStandardStreams true
        }
    }
}